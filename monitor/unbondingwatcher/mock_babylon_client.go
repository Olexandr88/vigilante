// Code generated by MockGen. DO NOT EDIT.
// Source: monitor/unbondingwatcher/expected_babylon_client.go

// Package unbondingwatcher is a generated GoMock package.
package unbondingwatcher

import (
	reflect "reflect"

	schnorr "github.com/btcsuite/btcd/btcec/v2/schnorr"
	chainhash "github.com/btcsuite/btcd/chaincfg/chainhash"
	gomock "github.com/golang/mock/gomock"
)

// MockBabylonClient is a mock of BabylonClient interface.
type MockBabylonClient struct {
	ctrl     *gomock.Controller
	recorder *MockBabylonClientMockRecorder
}

// MockBabylonClientMockRecorder is the mock recorder for MockBabylonClient.
type MockBabylonClientMockRecorder struct {
	mock *MockBabylonClient
}

// NewMockBabylonClient creates a new mock instance.
func NewMockBabylonClient(ctrl *gomock.Controller) *MockBabylonClient {
	mock := &MockBabylonClient{ctrl: ctrl}
	mock.recorder = &MockBabylonClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBabylonClient) EXPECT() *MockBabylonClientMockRecorder {
	return m.recorder
}

// ActiveBtcDelegations mocks base method.
func (m *MockBabylonClient) ActiveBtcDelegations(offset, limit uint64) ([]Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveBtcDelegations", offset, limit)
	ret0, _ := ret[0].([]Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActiveBtcDelegations indicates an expected call of ActiveBtcDelegations.
func (mr *MockBabylonClientMockRecorder) ActiveBtcDelegations(offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveBtcDelegations", reflect.TypeOf((*MockBabylonClient)(nil).ActiveBtcDelegations), offset, limit)
}

// BtcClientTipHeight mocks base method.
func (m *MockBabylonClient) BtcClientTipHeight() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BtcClientTipHeight")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BtcClientTipHeight indicates an expected call of BtcClientTipHeight.
func (mr *MockBabylonClientMockRecorder) BtcClientTipHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BtcClientTipHeight", reflect.TypeOf((*MockBabylonClient)(nil).BtcClientTipHeight))
}

// IsDelegationActive mocks base method.
func (m *MockBabylonClient) IsDelegationActive(stakingTxHash chainhash.Hash) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDelegationActive", stakingTxHash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDelegationActive indicates an expected call of IsDelegationActive.
func (mr *MockBabylonClientMockRecorder) IsDelegationActive(stakingTxHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDelegationActive", reflect.TypeOf((*MockBabylonClient)(nil).IsDelegationActive), stakingTxHash)
}

// ReportUnbonding mocks base method.
func (m *MockBabylonClient) ReportUnbonding(stakingTxHash chainhash.Hash, stakerUnbondingSig *schnorr.Signature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportUnbonding", stakingTxHash, stakerUnbondingSig)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportUnbonding indicates an expected call of ReportUnbonding.
func (mr *MockBabylonClientMockRecorder) ReportUnbonding(stakingTxHash, stakerUnbondingSig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportUnbonding", reflect.TypeOf((*MockBabylonClient)(nil).ReportUnbonding), stakingTxHash, stakerUnbondingSig)
}
